--- b/drivers/mmc/host/pxamci.c
+++ a/drivers/mmc/host/pxamci.c
@@ -730,6 +730,8 @@
 	}
 
 	if (host->pdata) {
+		int gpio_cd = host->pdata->gpio_card_detect;
+		int gpio_ro = host->pdata->gpio_card_ro;
 		int gpio_power = host->pdata->gpio_power;
 
 		host->detect_delay_ms = host->pdata->detect_delay_ms;
@@ -753,12 +755,29 @@
 			dev_err(dev, "Failed requesting gpio_cd\n");
 			goto out;
 		}
+		if (ret == -ENOENT && gpio_is_valid(gpio_cd)) {
+			ret = mmc_gpio_request_cd(mmc, gpio_cd, 0);
+			if (ret) {
+				dev_err(dev, "Failed requesting gpio_cd %d\n",
+					gpio_cd);
+			}
+		}
 
 		ret = mmc_gpiod_request_ro(mmc, "wp", 0, false, 0, NULL);
 		if (ret && ret != -ENOENT) {
 			dev_err(dev, "Failed requesting gpio_ro\n");
 			goto out;
 		}
+		/* Try platform data instead */
+		if (ret == -ENOENT && gpio_is_valid(gpio_ro)) {
+			ret = mmc_gpio_request_ro(mmc, gpio_ro);
+			if (ret) {
+				dev_err(dev,
+					"Failed requesting gpio_ro %d\n",
+					gpio_ro);
+				goto out;
+			}
+		}
 		if (!ret) {
 			host->use_ro_gpio = true;
 			mmc->caps2 |= host->pdata->gpio_card_ro_invert ?
--- b/include/linux/platform_data/mmc-pxamci.h
+++ a/include/linux/platform_data/mmc-pxamci.h
@@ -15,6 +15,8 @@
 	int (*get_ro)(struct device *);
 	int (*setpower)(struct device *, unsigned int);
 	void (*exit)(struct device *, void *);
+	int gpio_card_detect;			/* gpio detecting card insertion */
+	int gpio_card_ro;			/* gpio detecting read only toggle */
 	bool gpio_card_ro_invert;		/* gpio ro is inverted */
 	int gpio_power;				/* gpio powering up MMC bus */
 	bool gpio_power_invert;			/* gpio power is inverted */
