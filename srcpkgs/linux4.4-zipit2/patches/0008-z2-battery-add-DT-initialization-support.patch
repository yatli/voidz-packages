From 5f7bb86d38778b73094809a73882cc486f3a4104 Mon Sep 17 00:00:00 2001
From: Vasily Khoruzhick <anarsoul@gmail.com>
Date: Sun, 14 Feb 2016 20:57:40 -0800
Subject: [PATCH 08/19] z2-battery: add DT initialization support

Signed-off-by: Vasily Khoruzhick <anarsoul@gmail.com>
---
 drivers/power/z2_battery.c |   50 +++++++++++++++++++++++++++++++++++++++++---
 1 file changed, 47 insertions(+), 3 deletions(-)

diff --git a/drivers/power/z2_battery.c b/drivers/power/z2_battery.c
index b201e3f..97b0a43 100644
--- a/drivers/power/z2_battery.c
+++ b/drivers/power/z2_battery.c
@@ -12,6 +12,8 @@
 #include <linux/module.h>
 #include <linux/gpio.h>
 #include <linux/i2c.h>
+#include <linux/of_gpio.h>
+#include <linux/of_device.h>
 #include <linux/interrupt.h>
 #include <linux/irq.h>
 #include <linux/power_supply.h>
@@ -182,22 +184,46 @@ static int z2_batt_ps_init(struct z2_charger *charger, int props)
 	return 0;
 }
 
+struct z2_battery_info *z2_batt_parse_dt(struct device *dev)
+{
+	struct z2_battery_info *info;
+
+	info = devm_kzalloc(dev, sizeof(*info), GFP_KERNEL);
+	if (!info)
+		return info;
+	of_property_read_u32(dev->of_node, "i2c_reg", &info->batt_I2C_reg);
+	info->charge_gpio = of_get_named_gpio(dev->of_node, "charge-gpio", 0);
+	of_property_read_u32(dev->of_node, "min_voltage", &info->min_voltage);
+	of_property_read_u32(dev->of_node, "max_voltage", &info->max_voltage);
+	of_property_read_u32(dev->of_node, "batt_div", &info->batt_div);
+	of_property_read_u32(dev->of_node, "batt_mult", &info->batt_mult);
+	of_property_read_string(dev->of_node, "batt_name", (const char**)&info->batt_name);
+	info->batt_tech = POWER_SUPPLY_TECHNOLOGY_LION;
+
+	return info;
+}
+
 static int z2_batt_probe(struct i2c_client *client,
 				const struct i2c_device_id *id)
 {
 	int ret = 0;
 	int props = 1;	/* POWER_SUPPLY_PROP_PRESENT */
 	struct z2_charger *charger;
+	struct device *dev = &client->dev;
 	struct z2_battery_info *info = client->dev.platform_data;
 	struct power_supply_config psy_cfg = {};
 
-	if (info == NULL) {
+	if (!dev->of_node && info == NULL) {
 		dev_err(&client->dev,
 			"Please set platform device platform_data"
 			" to a valid z2_battery_info pointer!\n");
 		return -EINVAL;
 	}
 
+	/* Parse properties from DT */
+	if (dev->of_node)
+		info = z2_batt_parse_dt(dev);
+
 	charger = kzalloc(sizeof(*charger), GFP_KERNEL);
 	if (charger == NULL)
 		return -ENOMEM;
@@ -210,7 +236,12 @@ static int z2_batt_probe(struct i2c_client *client,
 
 	mutex_init(&charger->work_lock);
 
-	if (info->charge_gpio >= 0 && gpio_is_valid(info->charge_gpio)) {
+	if (!charger->info) {
+		ret = -ENOMEM;
+		goto err;
+	}
+
+	if (info->charge_gpio >= 0) {
 		ret = gpio_request(info->charge_gpio, "BATT CHRG");
 		if (ret)
 			goto err;
@@ -314,11 +345,24 @@ static const struct i2c_device_id z2_batt_id[] = {
 };
 MODULE_DEVICE_TABLE(i2c, z2_batt_id);
 
+#ifdef CONFIG_OF
+static const struct of_device_id z2_batt_of_match[] = {
+	{ .compatible = "aer915", },
+	{ },
+};
+MODULE_DEVICE_TABLE(of, z2_batt_of_match);
+#else
+static const struct of_device_id z2_batt_of_match[] = {
+	{ },
+};
+#endif
+
 static struct i2c_driver z2_batt_driver = {
 	.driver	= {
 		.name	= "z2-battery",
 		.owner	= THIS_MODULE,
-		.pm	= Z2_BATTERY_PM_OPS
+		.pm	= Z2_BATTERY_PM_OPS,
+		.of_match_table	= of_match_ptr(z2_batt_of_match),
 	},
 	.probe		= z2_batt_probe,
 	.remove		= z2_batt_remove,
-- 
1.7.10.4

